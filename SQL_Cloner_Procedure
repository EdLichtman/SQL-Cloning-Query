--THIS QUERY IS ONLY EQUIPPED TO HANDLE: 
--SIMPLE NUMERICS SUCH AS FLOATS, INTS, ETC
--SIMPLE STRING DATA TYPES LIMITED TO: VARCHARS, CHARS, NCHARS AND NVARCHARS
--DATES AND DATETIMES

CREATE PROCEDURE SQLCloner

            @TableName			AS VARCHAR(max), -- Table that holds data to clone.
            @NewTableName		AS VARCHAR(max) = '', -- Table to Insert into. If same as Tablename leave blank or write ''.
            @ColumnsDelimited	AS VARCHAR(max) = '', -- Each Column you specify must end with ". If you want all the columns leave it as ''
            @VarCharFind		AS VARCHAR(max) = '', -- Value to find (In order to REPLACE). If you aren't replacing leave blank or write ''.
            @VarCharReplace		AS VARCHAR(max) = '', -- Value to replace. If you aren't replacing leave blank or write ''.
            @OptionalParam		AS VARCHAR(Max) = '' -- Your WHERE clause. If you have none leave blank or write ''.
AS

    DECLARE @index				AS INT = 1,
			@ColumnPlace		AS INT = 0,
            @ColumnCount		AS INT = 0,
            @execFunction		AS VarChar(max) = '',
            @InsertTableRowName AS VarChar(max) = '',
            @TempFilterType		AS VarChar(Max) = ''
 


--Create RowCount of Table
    IF @ColumnsDelimited <> ''
        BEGIN
        WHILE @index <= LEN(@ColumnsDelimited)
            BEGIN 
            IF SUBSTRING(@ColumnsDelimited, @index, 1) = '"'
                BEGIN
                SET @ColumnCount = @ColumnCount + 1
	        END
    		SET @index = @index + 1
	    END
    END
    ELSE
        SELECT @COLUMNCOUNT = Count(*)
        FROM	(
    		    SELECT	COLUMN_NAME 
	    	    FROM	INFORMATION_SCHEMA.COLUMNS
		        WHERE	TABLE_NAME = '' + @TableName + ''
		        ) AS TheCount

    --Use While Loop to create Table Columns
    SET @index = 1
    WHILE @index <= @Columncount
        BEGIN
        --Determines the Variable type to change the exec function accordingly
        SET @ColumnPlace = @index
        IF @ColumnsDelimited <> ''
		    BEGIN
			SELECT @ColumnPlace = RowNum
			
			FROM    ( 
			        SELECT  ROW_NUMBER() OVER (ORDER BY Ordinal_Position) AS RowNum,
					        COLUMN_NAME
			        FROM    INFORMATION_SCHEMA.COLUMNS
				    WHERE   TABLE_NAME = @TableName
				    ) AS ColumnTable
			WHERE ColumnTable.COLUMN_NAME = SUBSTRING(@ColumnsDelimited, 0, CHARINDEX('"',@ColumnsDelimited,0))
			SET @ColumnsDelimited = SUBSTRING(@ColumnsDelimited, LEN(SUBSTRING(@ColumnsDelimited, 0, CHARINDEX('"',@ColumnsDelimited,0)))+2,LEN(@ColumnsDelimited))
			
		END

    	SELECT	@TempFilterType = TypeTable.DATA_TYPE

	    FROM	(
		     	SELECT	Data_Type,
			    		ROW_NUMBER() OVER (ORDER BY Ordinal_Position) AS RowNum
			    FROM	INFORMATION_SCHEMA.COLUMNS
			    WHERE	TABLE_NAME = @TableName
			
			    ) AS TypeTable
	    WHERE TypeTable.RowNum = @ColumnPlace

--Prepares @InsertTableRowName With the first part of the string
	    SET @InsertTableRowName = CASE 
			    WHEN	@TempFilterType IN('varchar', 'nvarchar','char', 'nchar')
				    THEN	@InsertTableRowName + ''''''''' + ' 
				WHEN	@TempFilterType IN('datetime', 'date')
					THEN	@InsertTableRowName + ''''''''' + Convert(varchar(Max), '
				ELSE
							@InsertTableRowName + 'Convert(varchar(Max), '
			END

--Determines the Name of the Column
		SELECT	@InsertTableRowName = @InsertTableRowName  + 
				CASE
					WHEN	@TempFilterType IN('varchar', 'nvarchar','char', 'nchar')
						THEN	'ISNULL(' + 'REPLACE(' + COLUMN_NAME + ','''''''','''''''''''')' + ','''')'
					WHEN	@TempFilterType IN('datetime', 'date')
						THEN	'ISNULL(' + 'REPLACE(' + COLUMN_NAME + ','''''''','''''''''''')' + ',''12/31/9999'')'
					ELSE
								'ISNULL(' + 'REPLACE(' + COLUMN_NAME + ','''''''','''''''''''')' + ',0)'
				END
	

		FROM	(
				SELECT	COLUMN_NAME, 
						ROW_NUMBER() OVER (ORDER BY Ordinal_Position) AS RowNum 
				FROM	INFORMATION_SCHEMA.COLUMNS
				WHERE	TABLE_NAME = @TableName
				) AS	TheRow
		WHERE RowNum = @ColumnPlace


--Finishes Closes each column insert (in every instance)
		SET @InsertTableRowName = CASE 
			WHEN	@TempFilterType IN('varchar', 'nvarchar','char', 'nchar')
				THEN	@InsertTableRowName + ' + '''''''''
			WHEN	@TempFilterType IN('datetime', 'date')
				THEN	@InsertTableRowName + ') + ''''''''' 
			ELSE
						@InsertTableRowName + ') '
			END

--Links each Row together with commas and plus signs until the very end.
		IF @index < @ColumnCount 
			BEGIN
			SET		@InsertTableRowName = CASE 
				WHEN	@TempFilterType IN('varchar', 'nvarchar','char', 'nchar')
					THEN	@InsertTableRowName + ' + ' + ''',''' + ' + '
				WHEN	@TempFilterType IN('datetime', 'date')
					THEN	@InsertTableRowName + ' + '','' + '
				ELSE
						@InsertTableRowName + ' + '','' + '
				END

		END

		SET @index = @index + 1
	END

--Puts the Query together (without any of the Parameters yet). 
--First, determine if a new table should be used instead.
	IF @NewTableName = ''
		BEGIN
		SET @NewTableName = @TableName
	END

--Next, Build the Query, and do it accordingly with if there is a Find/Replace asked for.
	SET @execFunction = 'SELECT '
	IF @VarCharFind <> ''
		BEGIN
		SET @execFunction = @execFunction + 'REPLACE('
	END
	SET @execFunction = @execFunction + '''INSERT INTO ' + @NewTableName + ' VALUES('' + ' + @InsertTableRowName + ' + '')'' '
	IF @VarCharFind <> ''
		BEGIN
		SET @execFunction = @execFunction + ', ''' + @VarCharFind + ''', ''' + @VarCharReplace + ''') '
	END
	SET @execFunction = @execFunction + 'FROM ' + @TableName

--Adds in the Where clause
	IF		@OptionalParam <> ''
		BEGIN
		SET @execFunction = @execFunction + ' ' + @OptionalParam
	END


--Executes the function and pulls an entire SET of queries to copy into the new Database

	PRINT @execFunction
	EXEC(@execFunction)

GO
